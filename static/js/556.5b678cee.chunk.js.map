{"version":3,"file":"static/js/556.5b678cee.chunk.js","mappings":"iPAEMA,EAAWC,EAAAA,GAAAA,GAAH,4GAORC,EAAeD,EAAAA,GAAAA,GAAH,kL,SCWlB,EAjBkB,SAAC,GAAe,IAAbE,EAAY,EAAZA,MACnB,OACE,SAACH,EAAD,UACGG,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,UAAWC,EAAvC,EAAuCA,aAAvC,OACT,UAACP,EAAD,YACE,gBACEQ,IAAG,yCAAoCD,GACvCE,IAAKL,GAAiBC,KAExB,uBAAID,GAAiBC,KACrB,uCAAeC,OANEH,EADV,KAYhB,ECSD,EAtBiB,WACf,OAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOT,EAAP,KAAcU,EAAd,KACMC,GAASC,EAAAA,EAAAA,MAYf,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBAM5B,OAJAC,EAAAA,EAAAA,IAAgBL,EAAOM,QAAS,QAASH,GAAiBI,MACxD,SAAAC,GAAQ,OAAIA,GAAYT,EAASS,EAASC,KAAlC,IAGH,kBAAMN,EAAgBO,OAAtB,CACR,GAAE,CAACV,EAAOM,WAGT,+BACoB,IAAjBjB,EAAMsB,SAAgB,kEACtBtB,EAAMsB,OAAS,IAAK,SAAC,EAAD,CAAWtB,MAAOA,MAG5C,C,uKCxBDuB,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,WAAMC,GAAN,+EAChB,qBACTC,EAFyB,UAChB,qBADgB,oBAEEH,GAFF,kBAKND,EAAAA,EAAAA,IAAUI,EAAK,CAAEC,OAAQF,EAAgBE,SALnC,cAKvBT,EALuB,yBAMtBA,EAASU,MANa,mCAQV,iBAAf,KAAMC,KARmB,mDAS7BC,QAAQC,MAAM,KAAMC,SATS,yDAAH,sDAajBC,EAAe,mCAAG,WAAOC,EAAOT,GAAd,+EACd,eACTC,EAFuB,UACd,eADc,oBAEIH,EAFJ,kBAEqBW,GAFrB,kBAKJZ,EAAAA,EAAAA,IAAUI,EAAK,CAAEC,OAAQF,EAAgBE,SALrC,cAKrBT,EALqB,yBAMpBA,EAASU,MANW,mCAQR,iBAAf,KAAMC,KARiB,mDAS3BC,QAAQC,MAAM,KAAMC,SATO,yDAAH,wDAafG,EAAY,mCAAG,WAAOnB,EAASS,GAAhB,gFACpBC,EADoB,iBACJV,EADI,oBACeO,GADf,kBAIDD,EAAAA,EAAAA,IAAUI,EAAK,CAAEC,OAAQF,EAAgBE,SAJxC,cAIlBT,EAJkB,yBAKjBA,EAASU,MALQ,mCAOL,iBAAf,KAAMC,KAPc,mDAQxBC,QAAQC,MAAM,KAAMC,SARI,yDAAH,wDAYZjB,EAAe,mCAAG,WAAOC,EAASoB,EAASX,GAAzB,kFACvBY,EADuB,iBACJrB,EADI,YACOoB,GAC9BV,EAFuB,UAEdW,EAFc,oBAEId,GAFJ,kBAKJD,EAAAA,EAAAA,IAAUI,EAAK,CAAEC,OAAQF,EAAgBE,SALrC,cAKrBT,EALqB,yBAMpBA,EAASU,MANW,mCAQR,iBAAf,KAAMC,KARiB,mDAS3BC,QAAQC,MAAM,KAAMC,SATO,yDAAH,yD","sources":["components/CastsList/CastsList.styled.js","components/CastsList/CastsList.js","pages/Cast.js","services/MovieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst CastsMap = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  row-gap: 20px;\n`;\n\nconst CastsMapItem = styled.li`\n  display: inline-flex;\n  flex-direction: column;\n  width: 200px;\n  row-gap: 5px;\n  padding: 5px;\n  border: 2px solid black;\n  border-radius: 5px;\n`;\n\nexport { CastsMap, CastsMapItem };\n","import PropTypes from 'prop-types';\nimport { CastsMap, CastsMapItem } from './CastsList.styled';\n\nconst CastsList = ({ casts }) => {\n  return (\n    <CastsMap>\n      {casts.map(({ id, original_name, name, character, profile_path }) => (\n        <CastsMapItem key={id}>\n          <img\n            src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n            alt={original_name || name}\n          />\n          <p>{original_name || name}</p>\n          <p>Chatacter: {character}</p>\n        </CastsMapItem>\n      ))}\n    </CastsMap>\n  );\n};\n\nexport default CastsList;\n\nCastsList.propTypes = {\n  casts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_name: PropTypes.string,\n      name: PropTypes.string,\n      caches: PropTypes.string,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'services/MovieAPI';\nimport CastsList from 'components/CastsList/CastsList';\n\nconst CastPage = () => {\n  const [casts, setCasts] = useState([]);\n  const params = useParams();\n\n  useEffect(() => {\n    const abortConrtoller = new AbortController();\n\n    getMovieDetails(params.movieId, 'casts', abortConrtoller).then(\n      response => response && setCasts(response.cast)\n    );\n\n    return () => abortConrtoller.abort();\n  }, [params.movieId]);\n\n  return (\n    <section>\n      {casts.length === 0 && <strong>We dont have casts for this movie</strong>}\n      {casts.length > 0 && <CastsList casts={casts} />}\n    </section>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '6dbb7affd9e1114a59f95efe62ebacfd';\n\nexport const getTrendingMovies = async abortController => {\n  const source = 'trending/movie/day';\n  const url = `${source}?api_key=${API_KEY}`;\n\n  try {\n    const response = await axios.get(url, { signal: abortController.signal });\n    return response.data;\n  } catch (error) {\n    if (error.code === 'ERR_CANCELED') return;\n    console.error(error.message);\n  }\n};\n\nexport const getMovieByQuery = async (query, abortController) => {\n  const source = 'search/movie';\n  const url = `${source}?api_key=${API_KEY}&query=${query}`;\n\n  try {\n    const response = await axios.get(url, { signal: abortController.signal });\n    return response.data;\n  } catch (error) {\n    if (error.code === 'ERR_CANCELED') return;\n    console.error(error.message);\n  }\n};\n\nexport const getMovieById = async (movieId, abortController) => {\n  const url = `/movie/${movieId}?api_key=${API_KEY}`;\n\n  try {\n    const response = await axios.get(url, { signal: abortController.signal });\n    return response.data;\n  } catch (error) {\n    if (error.code === 'ERR_CANCELED') return;\n    console.error(error.message);\n  }\n};\n\nexport const getMovieDetails = async (movieId, details, abortController) => {\n  const source = `/movie/${movieId}/${details}`;\n  const url = `${source}?api_key=${API_KEY}`;\n\n  try {\n    const response = await axios.get(url, { signal: abortController.signal });\n    return response.data;\n  } catch (error) {\n    if (error.code === 'ERR_CANCELED') return;\n    console.error(error.message);\n  }\n};\n"],"names":["CastsMap","styled","CastsMapItem","casts","map","id","original_name","name","character","profile_path","src","alt","useState","setCasts","params","useParams","useEffect","abortConrtoller","AbortController","getMovieDetails","movieId","then","response","cast","abort","length","axios","API_KEY","getTrendingMovies","abortController","url","signal","data","code","console","error","message","getMovieByQuery","query","getMovieById","details","source"],"sourceRoot":""}