{"version":3,"file":"static/js/898.a14f30f9.chunk.js","mappings":"oOA0BA,EAxBoB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACrB,OACE,wBACGA,EAAQC,KACP,gBACEC,EADF,EACEA,GACAC,EAFF,EAEEA,QAFF,IAGEC,eAAkBC,EAHpB,EAGoBA,YAAaC,EAHjC,EAGiCA,SAAUC,EAH3C,EAG2CA,OAH3C,OAKE,2BACE,gBACEC,IAAG,yCAAoCH,GACvCI,IAAKH,KAEP,uBAAIA,KACJ,oCAAYC,MACZ,oCAAYJ,OAPLD,EALX,KAkBP,ECKD,EAxBoB,WAClB,OAA8BQ,EAAAA,EAAAA,UAAS,IAAvC,eAAOV,EAAP,KAAgBW,EAAhB,KACMC,GAASC,EAAAA,EAAAA,MAYf,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBAM5B,OAJAC,EAAAA,EAAAA,IAAgBL,EAAOM,QAAS,UAAWH,GAAiBI,MAC1D,SAAAC,GAAQ,OAAIA,GAAYT,EAAWS,EAASC,QAApC,IAGH,kBAAMN,EAAgBO,OAAtB,CACR,GAAE,CAACV,EAAOM,WAGT,+BACsB,IAAnBlB,EAAQuB,SACP,wEAEDvB,EAAQuB,OAAS,IAAK,SAAC,EAAD,CAAavB,QAASA,MAGlD,C,uKC1BDwB,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,WAAMC,GAAN,+EAChB,qBACTC,EAFyB,UAChB,qBADgB,oBAEEH,GAFF,kBAKND,EAAAA,EAAAA,IAAUI,EAAK,CAAEC,OAAQF,EAAgBE,SALnC,cAKvBT,EALuB,yBAMtBA,EAASU,MANa,mCAQV,iBAAf,KAAMC,KARmB,mDAS7BC,QAAQC,MAAM,KAAMC,SATS,yDAAH,sDAajBC,EAAe,mCAAG,WAAOC,EAAOT,GAAd,+EACd,eACTC,EAFuB,UACd,eADc,oBAEIH,EAFJ,kBAEqBW,GAFrB,kBAKJZ,EAAAA,EAAAA,IAAUI,EAAK,CAAEC,OAAQF,EAAgBE,SALrC,cAKrBT,EALqB,yBAMpBA,EAASU,MANW,mCAQR,iBAAf,KAAMC,KARiB,mDAS3BC,QAAQC,MAAM,KAAMC,SATO,yDAAH,wDAafG,EAAY,mCAAG,WAAOnB,EAASS,GAAhB,gFACpBC,EADoB,iBACJV,EADI,oBACeO,GADf,kBAIDD,EAAAA,EAAAA,IAAUI,EAAK,CAAEC,OAAQF,EAAgBE,SAJxC,cAIlBT,EAJkB,yBAKjBA,EAASU,MALQ,mCAOL,iBAAf,KAAMC,KAPc,mDAQxBC,QAAQC,MAAM,KAAMC,SARI,yDAAH,wDAYZjB,EAAe,mCAAG,WAAOC,EAASoB,EAASX,GAAzB,kFACvBY,EADuB,iBACJrB,EADI,YACOoB,GAC9BV,EAFuB,UAEdW,EAFc,oBAEId,GAFJ,kBAKJD,EAAAA,EAAAA,IAAUI,EAAK,CAAEC,OAAQF,EAAgBE,SALrC,cAKrBT,EALqB,yBAMpBA,EAASU,MANW,mCAQR,iBAAf,KAAMC,KARiB,mDAS3BC,QAAQC,MAAM,KAAMC,SATO,yDAAH,yD","sources":["components/ReviewsList/ReviewsList.js","pages/Reviews.js","services/MovieAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <ul>\n      {reviews.map(\n        ({\n          id,\n          content,\n          author_details: { avatar_path, username, rating },\n        }) => (\n          <li key={id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w200${avatar_path}`}\n              alt={username}\n            />\n            <p>{username}</p>\n            <p>Rating: {rating}</p>\n            <p>Review: {content}</p>\n          </li>\n        )\n      )}\n    </ul>\n  );\n};\n\nexport default ReviewsList;\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      content: PropTypes.string,\n      author_details: PropTypes.object,\n    })\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'services/MovieAPI';\nimport ReviewsList from 'components/ReviewsList/ReviewsList';\n\nconst ReviewsPage = () => {\n  const [reviews, setReviews] = useState([]);\n  const params = useParams();\n\n  useEffect(() => {\n    const abortConrtoller = new AbortController();\n\n    getMovieDetails(params.movieId, 'reviews', abortConrtoller).then(\n      response => response && setReviews(response.results)\n    );\n\n    return () => abortConrtoller.abort();\n  }, [params.movieId]);\n\n  return (\n    <section>\n      {reviews.length === 0 && (\n        <strong>We dont have any reviews for this movie</strong>\n      )}\n      {reviews.length > 0 && <ReviewsList reviews={reviews} />}\n    </section>\n  );\n};\n\nexport default ReviewsPage;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '6dbb7affd9e1114a59f95efe62ebacfd';\n\nexport const getTrendingMovies = async abortController => {\n  const source = 'trending/movie/day';\n  const url = `${source}?api_key=${API_KEY}`;\n\n  try {\n    const response = await axios.get(url, { signal: abortController.signal });\n    return response.data;\n  } catch (error) {\n    if (error.code === 'ERR_CANCELED') return;\n    console.error(error.message);\n  }\n};\n\nexport const getMovieByQuery = async (query, abortController) => {\n  const source = 'search/movie';\n  const url = `${source}?api_key=${API_KEY}&query=${query}`;\n\n  try {\n    const response = await axios.get(url, { signal: abortController.signal });\n    return response.data;\n  } catch (error) {\n    if (error.code === 'ERR_CANCELED') return;\n    console.error(error.message);\n  }\n};\n\nexport const getMovieById = async (movieId, abortController) => {\n  const url = `/movie/${movieId}?api_key=${API_KEY}`;\n\n  try {\n    const response = await axios.get(url, { signal: abortController.signal });\n    return response.data;\n  } catch (error) {\n    if (error.code === 'ERR_CANCELED') return;\n    console.error(error.message);\n  }\n};\n\nexport const getMovieDetails = async (movieId, details, abortController) => {\n  const source = `/movie/${movieId}/${details}`;\n  const url = `${source}?api_key=${API_KEY}`;\n\n  try {\n    const response = await axios.get(url, { signal: abortController.signal });\n    return response.data;\n  } catch (error) {\n    if (error.code === 'ERR_CANCELED') return;\n    console.error(error.message);\n  }\n};\n"],"names":["reviews","map","id","content","author_details","avatar_path","username","rating","src","alt","useState","setReviews","params","useParams","useEffect","abortConrtoller","AbortController","getMovieDetails","movieId","then","response","results","abort","length","axios","API_KEY","getTrendingMovies","abortController","url","signal","data","code","console","error","message","getMovieByQuery","query","getMovieById","details","source"],"sourceRoot":""}